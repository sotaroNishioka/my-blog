---
description: 
globs: 
alwaysApply: true
---
# 1. サービス設計 (ブログ)

## 1.1 画面一覧

### 1.1.1 TOPページ (記事一覧)
**役割**: ブログの玄関口として、最新の記事一覧を表示するページ

**主な要素**:
- グローバルヘッダー: サイトタイトル/ロゴ、ナビゲーション（例: TOP, Tags, About）
- 記事リスト: 最新の記事を数件表示（タイトル、日付、概要、サムネイル画像など）
- ページネーション: 記事一覧を複数ページに分割して表示
- サイドバー (オプション): プロフィール、カテゴリ/タグクラウド、検索フォームなど
- フッター: コピーライト、プライバシーポリシーなど

### 1.1.2 記事詳細ページ
**役割**: 個別の記事コンテンツを表示するページ

**主な要素**:
- グローバルヘッダー
- 記事ヘッダー: タイトル、公開日/更新日、タグ
- 記事本文: Markdownから変換されたHTMLコンテンツ
- 目次 (オプション): 記事内の見出しへのリンク
- 関連記事 (オプション): 同じタグやカテゴリの記事へのリンク
- コメントセクション (オプション): 読者がコメントを投稿・閲覧できる機能
- グローバルフッター

### 1.1.3 タグ別記事一覧ページ
**役割**: 特定のタグが付与された記事を一覧表示するページ

**主な要素**:
- グローバルヘッダー
- ページタイトル: タグ名を表示
- 記事リスト: 該当タグの記事一覧
- ページネーション
- グローバルフッター

### 1.1.4 (オプション) 検索結果ページ
**役割**: サイト内検索の結果を表示するページ

**主な要素**:
- グローバルヘッダー
- 検索キーワード表示
- 検索結果記事リスト
- ページネーション
- グローバルフッター

## 1.2 UI／UX設計

### 1.2.1 ユーザーフロー
```plaintext
+---------------------+      +-----------------------+
|       TOP           |----->| タグ別記事一覧ページ  |
| (記事一覧)        |      +-----------+-----------+
+--------+------------+                  |
         |                              |
         v                              v
+---------------------+      +-----------------------+
|   記事詳細ページ    |<-----| (オプション)関連記事  |
+---------------------+      +-----------------------+
```

### 1.2.2 ペルソナ詳細
| ペルソナ     | 特徴                                | ニーズ                                     |
|--------------|-------------------------------------|--------------------------------------------|
| 一般読者     | 興味のある記事を読みたい            | 分かりやすいナビゲーション、読みやすい本文 |
| 技術者読者   | 特定の技術情報を探している          | 正確な情報、コードスニペットの見やすさ     |
| 管理者       | 記事の投稿・編集・管理を行いたい    | 簡単な記事作成フロー、プレビュー機能       |

### 1.2.3 デバイス別UI考慮
- **モバイル (＜640px)**
  - シングルカラムレイアウトを基本とする
  - ナビゲーションはハンバーガーメニュー等で表示
  - タップしやすい要素サイズ
- **タブレット (640px〜1023px)**
  - サイドバー付きレイアウトも検討 (コンテンツ量による)
  - タッチ操作に適した余白
- **デスクトップ (≥1024px)**
  - マルチカラムレイアウト（記事本文 + サイドバーなど）
  - マウス操作に適したインタラクション

### 1.2.4 アクセシビリティ
- WCAG 2.1 AAレベル準拠を目指す
- セマンティックなHTMLマークアップ
- 適切なARIA属性の使用
- キーボードナビゲーションの確保
- 十分なコントラスト比
- 画像への代替テキスト付与

## 1.3 状態管理戦略

### 1.3.1 データ取得とキャッシュ
- **getStaticProps / getStaticPaths**: ビルド時にMarkdownファイルから記事データを取得し、静的HTMLを生成する。ブログのような静的コンテンツ主体のサイトに適している。
- **キャッシュ戦略**: ビルド時に生成されたHTMLとデータはCDN（GitHub Pages / Vercelなど）によってキャッシュされる。更新は再ビルド＆デプロイ時に行われる。
- **クライアントサイドでのデータ取得**: コメント機能など動的な要素がある場合は、SWRやReact Query、またはシンプルなfetch APIを使用してクライアントサイドでデータを取得・更新する。

### 1.3.2 ローカル UI 状態
- **useState / useReducer**: モーダル開閉、モバイルメニューの表示/非表示、フォーム入力値など、コンポーネントローカルなUI状態の管理に使用する。
- **Context API**: サイト全体のテーマ設定など、広範囲で共有が必要な状態があれば使用を検討する。ただし、Props drillingが過度にならない範囲で、基本はローカルステートを優先する。

### 1.3.3 API実装戦略
- 現状のブログ機能では、外部APIとの連携は少ない想定。
- コメント機能やお問い合わせフォームなどを実装する場合、Next.jsのAPI Routes (`pages/api` または App Router の Route Handlers) を使用してバックエンドロジックを実装する。
- または、外部サービス (例: Supabase, Firebase, Vercel Functions) を利用する。

## 1.4 フォーム管理

### 1.4.1 対象フォーム
- 検索フォーム (もし実装する場合)
- コメント投稿フォーム (もし実装する場合)
- お問い合わせフォーム (もし実装する場合)

### 1.4.2 ライブラリ選定
- シンプルなフォームであれば、Reactの `useState` で十分管理可能。
- バリデーションや複雑な状態管理が必要な場合は、**React Hook Form** と **Zod** (バリデーションスキーマ) の組み合わせを検討する。

### 1.4.3 バリデーションとエラーハンドリング
- Zodでスキーマを定義し、クライアントサイドおよびサーバーサイド(API Routes)でバリデーションを行う。
- エラーメッセージは各入力フィールドの近くに分かりやすく表示する。`aria-invalid` 属性等でアクセシビリティにも配慮する。

## 1.5 コンポーネント設計

### 1.5.1 UI コンポーネントライブラリ / スタイル
- **Tailwind CSS**: ユーティリティファーストのアプローチでスタイリングを行う。`tailwind.config.js` でデザイントークン（色、フォント、スペースなど）を定義する。
- **自作コンポーネント**: Tailwind CSSをベースに、再利用可能なUIコンポーネント（Button, Card, Layoutなど）を `src/components` ディレクトリ以下に作成する。
- **(オプション) shadcn/ui**: 必要に応じて、より高機能なコンポーネント（Dropdown, Modalなど）を導入する場合に検討。

### 1.5.2 アトミックデザイン / コンポーネント階層 (例)
- **Atoms**: `Button`, `Link`, `Text`, `Heading`, `TagBadge`
- **Molecules**: `ArticleCard`, `Pagination`, `SearchBar`, `CommentForm`
- **Organisms**: `Header`, `Footer`, `ArticleList`, `Sidebar`, `CommentSection`
- **Templates**: `BaseLayout`, `PostLayout`, `ListPageLayout`
- **Pages**: Next.jsの各ページコンポーネント (`src/pages` または `app/`)

### 1.5.3 Props・型定義スタイル
- コンポーネントのPropsは**TypeScriptのInterface**で定義する (`XxxProps`)。
- 必須/任意のPropsを明確にし、必要に応じてデフォルト値を設定する。
- イベントハンドラーの型 (`onClick: () => void` など) も明記する。

### 1.5.4 コンポーネント再利用戦略
- **Layoutコンポーネント**: ヘッダー、フッターなど共通のページ構造を持つ `BaseLayout` を作成し、各ページで利用する。記事詳細ページ用に `PostLayout` を作成するなど、特定の構造に特化したレイアウトも用意する。
- **共通ユーティリティ**: 日付フォーマット、テキスト処理などのユーティリティ関数を `src/lib` や `src/utils` にまとめる。
- **型定義**: 共通の型定義 (例: `PostData`) を `src/types` にまとめる。

## 1.6 アニメーション設計

### 1.6.1 アニメーションの対象
- ページ遷移時のフェードイン/アウト
- ホバーエフェクト (リンク、ボタン、カードなど)
- モーダルやドロップダウンの表示/非表示
- (オプション) スクロール連動のアニメーション

### 1.6.2 実装方針
- **CSS Transitions / Animations**: シンプルなホバーエフェクトやフェード効果には、Tailwind CSSのクラスやカスタムCSSで対応する。
- **(オプション) Framer Motion**: より複雑なアニメーションや状態に基づいたアニメーション（例: リストアイテムの追加/削除アニメーション）が必要な場合に導入を検討する。`AnimatePresence` や `motion` コンポーネントを活用する。

### 1.6.3 パフォーマンス考慮
- `transform` や `opacity` など、GPUアクセラレーションが効きやすいCSSプロパティを優先的に使用する。
- 過度なアニメーションは避け、ユーザー体験を損なわない範囲で実装する。
- JavaScriptによるアニメーションは、パフォーマンスへの影響を考慮し、必要な場合に限定する。

### 1.6.4 アクセシビリティ（Reduced Motion）対応
- OSの「視差効果を減らす」設定 (`prefers-reduced-motion` メディアクエリ) を尊重する。
- Reduced Motionが有効な場合は、アニメーションを無効化するか、シンプルなフェード効果などに代替する。
- Framer Motionを使用する場合は `useReducedMotion` フックなどを活用する。