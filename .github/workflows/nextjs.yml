# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Next.js CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # プロジェクトに合わせて変更
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      # Cache dependencies
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # プロジェクトに合わせて変更
          cache: 'npm'
      # Restore cache first
      - name: Restore dependencies cache
        uses: actions/cache/restore@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      # Install dependencies if cache missed
      - name: Install dependencies (if cache miss)
        run: npm ci
      - name: Run Lint
        run: npm run lint
      - name: Run Tests (Jest)
        run: npm test

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # プロジェクトに合わせて変更
          cache: 'npm'
      # Restore cache first
      - name: Restore dependencies cache
        uses: actions/cache/restore@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      # Install dependencies if cache missed
      - name: Install dependencies (if cache miss)
        run: npm ci
      - name: Build Next.js application
        run: npm run build
        env:
          # Set the base path for GitHub Pages
          NEXT_PUBLIC_BASE_PATH: /my-blog
      - name: Build Storybook
        run: npm run build-storybook
      - name: Serve Storybook static build and run tests
        run: npx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" "npx http-server storybook-static --port 6006 --silent" "npx wait-on tcp:127.0.0.1:6006 && npm run test-storybook -- --no-cache"
      - name: Upload Next.js build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository by default
          path: ./out

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    # Deploy to the github-pages environment
    if: github.ref == 'refs/heads/main' # Only deploy on push to main branch
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # or the latest "vX" version tag
